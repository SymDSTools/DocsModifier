
<!DOCTYPE html>
<html>

<head>
	<title>Layouts</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<link rel="stylesheet" href="css/themes/default/theme.min.css" />
		<link rel="stylesheet" href="css/themes/default/jquery.mobile.structure-1.2.0.min.css" />
		<script src="js/energize-min.js"></script>
		<script src="js/jquery-1.8.1.min.js"></script>

		<script src="../../app.js"></script>
		<script src="js/example.js"></script>
		<link rel="stylesheet" href="css/docs.css" />
		<script src="../app.js"></script>
		<script src="js/common.js"></script>
		<script src="js/jquery.mobile-1.2.0.min.js"></script>
</head>

<body>

<div data-role="page" data-theme="a" >

	<div data-role="header" data-position="fixed">
		<a href='#' class='ui-btn-left' data-icon='arrow-l' data-theme="c" onclick="history.back(); return false">Back</a> <h1>Layouts</h1>
	</div><!-- /header -->

	<div data-role="content">
		<p>Layouts are container objects which are used to visually organize graphical objects (controls), such as text, buttons and images on the screen. There are
		3 types of layout: <b>"Linear"</b>, <b>"Frame"</b> and <b>"Absolute"</b>. </p>

		<p>Layouts are transparent by default but you can set a background image which
		can be tiled or stretched to fill the layout.  You can also set a background color or background gradient</p>

		<p>Create layouts using the <b>CreateLayout</b> function of the app object:</p>
		<div class="samp">&nbsp;lay = app.CreateLayout( <a href="#pop_str" data-transition="pop" data-rel="popup">type</a>, <a href="#pop_str_arr" data-transition="pop" data-rel="popup">options</a> );</div>

		<p>Add child objects to a layout using the <b>AddChild</b> function of the layout object</p>
		<div class="samp">&nbsp;lay.AddChild( <a href="#pop_obj" data-transition="pop" data-rel="popup">object</a> );</div>

		<p>The alignment of chlld objects within a layout can be set by adding the options <b>"Left"</b>, <b>"Right"</b>, <b>"Bottom"</b> and <b>"VCenter"</b>,
		by default objects will be aligned <b>"Top,Center"</b>.</p>

		<p>Remove layouts using the <b>RemoveLayout</b> function of the app object:</p>
		<div class="samp">&nbsp;app.RemoveLayout( lay );</div>

		<h3>Linear Layouts</h3>
		<p>Linear layouts are probably the most useful type and are used to organize controls in either the <b>"Vertical"</b> or <b>"Horizontal"</b>
		direction on screen.</p>

		<div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
			<h3>Example - Vertical</h3>
			<div id="examp1" style="font-size:70%">
				function OnStart()<br>
				{<br>
				 <b id="snip1"  style="font-size:105%">
				  &nbsp;&nbsp;lay = app.CreateLayout( "Linear", "Vertical" );<br><br>
				 </b>
				 &nbsp;&nbsp;btnA = app.CreateButton( "A", 0.2, 0.1 );<br>
				 &nbsp;&nbsp;lay.AddChild( btnA );<br><br>
				 &nbsp;&nbsp;btnB = app.CreateButton( "B", 0.2, 0.1 );<br>
				 &nbsp;&nbsp;lay.AddChild( btnB );<br><br>
				 &nbsp;&nbsp;btnC = app.CreateButton( "C", 0.2, 0.1 );<br>
				 &nbsp;&nbsp;lay.AddChild( btnC );<br><br>

				 &nbsp;&nbsp;app.AddLayout( lay );<br>
				}<br>
			</div>
			<div name="divCopy" align="right">
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip1)">&nbsp;&nbsp;Copy&nbsp;&nbsp;</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp1)">Copy All</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp1)">&nbsp;&nbsp;&nbsp;Run&nbsp;&nbsp;&nbsp;</a>
			</div>
		</div>

		<div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
			<h3>Example - Horizontal</h3>
			<div id="examp2" style="font-size:70%">
				function OnStart()<br>
				{<br>
				 <b id="snip2"  style="font-size:105%">
				  &nbsp;&nbsp;lay = app.CreateLayout( "Linear", "Horizontal,FillXY" );<br><br>
				 </b>
				 &nbsp;&nbsp;btnA = app.CreateButton( "A", 0.2, 0.1 );<br>
				 &nbsp;&nbsp;lay.AddChild( btnA );<br><br>
				 &nbsp;&nbsp;btnB = app.CreateButton( "B", 0.2, 0.1 );<br>
				 &nbsp;&nbsp;lay.AddChild( btnB );<br><br>
				 &nbsp;&nbsp;btnC = app.CreateButton( "C", 0.2, 0.1 );<br>
				 &nbsp;&nbsp;lay.AddChild( btnC );<br><br>

				 &nbsp;&nbsp;app.AddLayout( lay );<br>
				}<br>
			</div>
			<div name="divCopy" align="right">
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip2)">&nbsp;&nbsp;Copy&nbsp;&nbsp;</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp2)">Copy All</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp2)">&nbsp;&nbsp;&nbsp;Run&nbsp;&nbsp;&nbsp;</a>
			</div>
		</div>

		<p>By default Layouts will auto-size to wrap their contents but you have 3 more options as to how a layout
		sizes within it's parent:- <b>"FillX"</b>, <b>"FillY"</b> and <b>"FillXY"</b>.</p>

		<div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
			<h3>Example - Combined</h3>
			<div id="examp3" style="font-size:70%">
				function OnStart()<br>
				{<br>
				 &nbsp;&nbsp;layVert = app.CreateLayout( "Linear", "Vertical,FillXY" );<br><br>

				 &nbsp;&nbsp;btnA = app.CreateButton( "A", 0.6, 0.1 );<br>
				 &nbsp;&nbsp;layVert.AddChild( btnA );<br><br>
				 <b id="snip3"  style="font-size:105%">
				 &nbsp;&nbsp;layHoriz = app.CreateLayout( "Linear", "Horizontal" );<br>
				 </b>
				 &nbsp;&nbsp;layVert.AddChild( layHoriz );<br><br>
				 &nbsp;&nbsp;btnB1 = app.CreateButton( "B1", 0.2, 0.1 );<br>
				 &nbsp;&nbsp;layHoriz.AddChild( btnB1 );<br>
				 &nbsp;&nbsp;btnB2 = app.CreateButton( "B2", 0.2, 0.1 );<br>
				 &nbsp;&nbsp;layHoriz.AddChild( btnB2 );<br>
				 &nbsp;&nbsp;btnB3 = app.CreateButton( "B3", 0.2, 0.1 );<br>
				 &nbsp;&nbsp;layHoriz.AddChild( btnB3 );<br><br>

				 &nbsp;&nbsp;btnC = app.CreateButton( "C", 0.6, 0.1 );<br>
				 &nbsp;&nbsp;layVert.AddChild( btnC );<br><br>

				 &nbsp;&nbsp;app.AddLayout( layVert );<br>
				}<br>
			</div>
			<div name="divCopy" align="right">
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip3)">&nbsp;&nbsp;Copy&nbsp;&nbsp;</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp3)">Copy All</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp3)">&nbsp;&nbsp;&nbsp;Run&nbsp;&nbsp;&nbsp;</a>
			</div>
		</div>

		<h3>Frame Layouts</h3>
		<p>Frame layouts are used to display objects in front or behind each other.  Every time the <b>AddChild</b> function is called on a Frame
			layout, the child object is placed in a new layer <b>in front</b> of the previously added object at the top left of the frame. </p>
		<p>Frame Layouts are useful if you wish to do <b>animated Flips</b> or <b>Slides</b> to reveal layers of objects or use <b>transparency</b>.</p>

		<div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
			<h3>Example - Image Swap</h3>
			<div id="examp4" style="font-size:70%">
				function OnStart()<br>
				{<br>
				&nbsp;&nbsp;lay = app.CreateLayout( "Linear", "VCenter,FillXY" );<br><br>
				<br>
				<b id="snip4"  style="font-size:100%">
				&nbsp;&nbsp;layFrm = app.CreateLayout( "Frame" );<br>
				</b>
				&nbsp;&nbsp;img1 = app.CreateImage( "/Sys/Img/Droid1.png", 0.5 );<br>
				&nbsp;&nbsp;layFrm.AddChild( img1 );<br>
				<br>
				&nbsp;&nbsp;img2 = app.CreateImage( "/Sys/Img/Hello.png", 0.5 );<br>
				&nbsp;&nbsp;img2.SetVisibility( "Hide" );<br>
				&nbsp;&nbsp;layFrm.AddChild( img2 );<br>
				&nbsp;&nbsp;lay.AddChild( layFrm );<br>
				<br>
				&nbsp;&nbsp;btn = app.CreateButton( "Press Me" );<br>
				&nbsp;&nbsp;btn.SetMargins( 0,0.1,0,0 );<br>
				&nbsp;&nbsp;btn.SetOnTouch( btn_OnTouch );<br>
				&nbsp;&nbsp;lay.AddChild( btn );<br>
				 <br>
				&nbsp;&nbsp;app.AddLayout( lay );<br>
				}<br>
				<br>
				function btn_OnTouch()<br>
				{<br>
					&nbsp;&nbsp;if( img2.GetVisibility()=="Hide" )<br>
					&nbsp;&nbsp;&nbsp;img2.SetVisibility( "Show" );<br>
					&nbsp;&nbsp;else <br>
					&nbsp;&nbsp;&nbsp;img2.SetVisibility( "Hide" );<br>
				}<br>
			</div>
			<div name="divCopy" align="right">
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip4)">&nbsp;&nbsp;Copy&nbsp;&nbsp;</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp4)">Copy All</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp4)">&nbsp;&nbsp;&nbsp;Run&nbsp;&nbsp;&nbsp;</a>
			</div>
		</div>

		<h3>Absolute Layouts</h3>
		<p>Absolute layouts ignore all alignment options and allow the absolute positioning of controls by calling the <b>SetPosition</b> and <b>SetSize</b> functions of
		each of the child objects.  This type of layout is rarely used and you are encouraged use Linear layouts for most of your programs.</p>

		<h3>Padding and Margins</h3>
		<p>In Linear and Frame Layouts, you can use the <b>SetPadding</b> function of a layout to keep a layout's child objects away from the edges of the layout:</p>
		<div class="samp">&nbsp;lay.SetPadding( <a href="#pop_num_prd" data-transition="pop" data-rel="popup">left</a>, <a href="#pop_num_prd" data-transition="pop" data-rel="popup">top</a>, <a href="#pop_num_prd" data-transition="pop" data-rel="popup">right</a>, <a href="#pop_num_prd" data-transition="pop" data-rel="popup">bottom</a> );</div>

		<p>Also every child object within a layout can have margins added by using the <b>SetMargins</b> function of the child object:</p>
		<div class="samp">&nbsp;obj.SetMargins( <a href="#pop_num_prd" data-transition="pop" data-rel="popup">left</a>, <a href="#pop_num_prd" data-transition="pop" data-rel="popup">top</a>, <a href="#pop_num_prd" data-transition="pop" data-rel="popup">right</a>, <a href="#pop_num_prd" data-transition="pop" data-rel="popup">bottom</a> );</div>

		<p>Using Linear layouts and setting margins on child objects is usually the best way to position your App's graphical objects.</p>

		<h3>Backgrounds</h3>

		<p>The background of a layout will be transparent by default, but you can set a color using the <b>SetBackColor</b> function.</p>
		<div class="samp">&nbsp;lay.SetBackColor( <a href="#pop_str_col" data-transition="pop" data-rel="popup">colorCode</a> );</div>

		<p>Colors are given as hex <b>color codes</b> which can be copied from various graphics programs or simply exprimented with until you get the color you
		want. The format is (#alpha:red:green:blue) where each value can range from 0 to 255 in base 16 which is 00 to ff.</p>
		<p>For example "#ff00ff00" would be
		full strength green and "#ff000088" would be around half strength blue and "#44ff00ff" would be semi-transparent full strength purple.</p>

		<p>You can also use a gradient background for a layout using the <b>SetBackGradient</b> and <b>SetBackGradientRadial</b> functions.</p>
		<div class="samp">&nbsp;lay.SetBackGradient( <a href="#pop_str_col" data-transition="pop" data-rel="popup">colorCode1</a>, <a href="#pop_str_col" data-transition="pop" data-rel="popup">colorCode2</a> );</div><br>
		<div class="samp">&nbsp;lay.SetBackGradientRadial( <a href="#pop_num_ord" data-transition="pop" data-rel="popup">x</a>, <a href="#pop_num_ord" data-transition="pop" data-rel="popup">y</a>, <a href="#pop_num_ord" data-transition="pop" data-rel="popup">radius</a>, <a href="#pop_str_col" data-transition="pop" data-rel="popup">colorCode1</a>, <a href="#pop_str_col" data-transition="pop" data-rel="popup">colorCode2</a> );</div>
		<br>

		<h3>Visibility</h3>

		<p>The visibility of both layouts and child objects can be controlled using the <b>SetVisibility</b> function. Use the
		values <b>"Show"</b> or <b>"Hide"</b> to make objects invisible or visible and <b>"Gone"</b> to exclude the object from
		the layout completely (surrounding objects will re-arrange).</p>
		<div class="samp">&nbsp;obj.SetVisibility( <a href="#pop_str_mod" data-transition="pop" data-rel="popup">mode</a> );</div><br>

		<p>The following methods are avaiable on the Layout object:</p>

		<div class="samp">&nbsp;SetVisibility( <a href="#pop_bin" data-transition="pop" data-rel="popup">visibility</a> )</div>
		<div class="samp">&nbsp;GetVisibility()</div>
		<div class="samp">&nbsp;SetPadding( <a href="#pop_num_prd" data-transition="pop" data-rel="popup">left</a>, <a href="#pop_num_prd" data-transition="pop" data-rel="popup">top</a>, <a href="#pop_num_prd" data-transition="pop" data-rel="popup">right</a>, <a href="#pop_num_prd" data-transition="pop" data-rel="popup">bottom</a> )</div>
		<div class="samp">&nbsp;SetMargins( <a href="#pop_num_prd" data-transition="pop" data-rel="popup">left</a>, <a href="#pop_num_prd" data-transition="pop" data-rel="popup">top</a>, <a href="#pop_num_prd" data-transition="pop" data-rel="popup">right</a>, <a href="#pop_num_prd" data-transition="pop" data-rel="popup">bottom</a> )</div>
		<div class="samp">&nbsp;SetBackground( <a href="#pop_str_pah" data-transition="pop" data-rel="popup">imageFile</a>, <a href="#pop_str_arr" data-transition="pop" data-rel="popup">options</a> )</div>
		<div class="samp">&nbsp;SetBackColor( <a href="#pop_str_col" data-transition="pop" data-rel="popup">colorCode</a> )</div>
		<div class="samp">&nbsp;SetBackGradient( <a href="#pop_str_col" data-transition="pop" data-rel="popup">color1</a>, <a href="#pop_str_col" data-transition="pop" data-rel="popup">color2</a>, <a href="#pop_str_col" data-transition="pop" data-rel="popup">color3</a> )</div>
		<div class="samp">&nbsp;SetBackGradientRadial( <a href="#pop_num_ord" data-transition="pop" data-rel="popup">x</a>, <a href="#pop_num_ord" data-transition="pop" data-rel="popup">y</a>, <a href="#pop_num_ang" data-transition="pop" data-rel="popup">r</a>, <a href="#pop_str_col" data-transition="pop" data-rel="popup">color1</a>, <a href="#pop_str_col" data-transition="pop" data-rel="popup">color2</a>, <a href="#pop_str_col" data-transition="pop" data-rel="popup">color3</a> )</div>
		<div class="samp">&nbsp;SetPosition( <a href="#pop_num_prd" data-transition="pop" data-rel="popup">left</a>, <a href="#pop_num_prd" data-transition="pop" data-rel="popup">top</a>, <a href="#pop_num_srd" data-transition="pop" data-rel="popup">width</a>, <a href="#pop_num_srd" data-transition="pop" data-rel="popup">height</a> )</div>
		<div class="samp">&nbsp;SetSize( <a href="#pop_num_srd" data-transition="pop" data-rel="popup">width</a>, <a href="#pop_num_srd" data-transition="pop" data-rel="popup">height</a> )</div>
		<div class="samp">&nbsp;GetWidth()</div>
		<div class="samp">&nbsp;GetHeight()</div>

		<div class="samp">&nbsp;SetOrientation( orient )</div>
		<div class="samp">&nbsp;AddChild( <a href="#pop_obj_cld" data-transition="pop" data-rel="popup">child</a> )</div>
		<div class="samp">&nbsp;RemoveChild( <a href="#pop_obj_cld" data-transition="pop" data-rel="popup">child</a> )</div>
		<div class="samp">&nbsp;DestroyChild( <a href="#pop_obj_cld" data-transition="pop" data-rel="popup">child</a> )</div>
		<div class="samp">&nbsp;Animate( <a href="#pop_str" data-transition="pop" data-rel="popup">type</a>, <a href="#pop_fnc" data-transition="pop" data-rel="popup">callback</a> )</div>
		<div class="samp">&nbsp;SetTouchable( <a href="#pop_bin" data-transition="pop" data-rel="popup">touchable</a> )</div>
		<br>

	</div><!-- /content -->

<div data-role="popup" id="pop_num" class="ui-content"><b>number</b></div>
<div data-role="popup" id="pop_num_ang" class="ui-content"><b>number</b> - degrees (0-360)</div>
<div data-role="popup" id="pop_num_srd" class="ui-content"><b>number</b> - fraction of screen size</div>
<div data-role="popup" id="pop_num_ord" class="ui-content"><b>number</b> - fraction of object size</div>
<div data-role="popup" id="pop_num_prd" class="ui-content"><b>number</b> - fraction of parent size</div>
<div data-role="popup" id="pop_str" class="ui-content"><b>string</b></div>
<div data-role="popup" id="pop_str_col" class="ui-content"><b>string</b><br>&nbsp;&nbsp;hexadecimal: "#rrggbb", "#aarrggbb"<br>&nbsp;&nbsp;colourName: "red",  "green", ...</div>
<div data-role="popup" id="pop_str_mod" class="ui-content"><b>string</b> - mode</div>
<div data-role="popup" id="pop_str_arr" class="ui-content"><b>string</b> - comma separated</div>
<div data-role="popup" id="pop_obj" class="ui-content"><b>object</b></div>
<div data-role="popup" id="pop_obj_cld" class="ui-content"><b>object</b> - DS control</div>
<div data-role="popup" id="pop_bin" class="ui-content"><b>boolean</b></div>
<div data-role="popup" id="pop_fnc" class="ui-content"><b>function</b> - (args)</div>
</div><!-- /page -->

</body>
</html>
