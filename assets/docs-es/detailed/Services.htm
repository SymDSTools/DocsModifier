<!DOCTYPE html>
<html>

<head>
<title>Servicios</title>
<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet"  href="../css/themes/default/theme.min.css" />
<link rel="stylesheet"  href="../css/themes/default/jquery.mobile.structure-1.2.0.min.css" />
<script src="../js/energize-min.js"></script>
<script src="../js/jquery-1.8.1.min.js"></script>
<script src="../../../app.js"></script>
<script src="../js/example.js"></script>
<link rel="stylesheet" href="../css/docs.css" />
<script src="../js/common.js"></script>
<script src="../js/jquery.mobile-1.2.0.min.js"></script>

</head>

<body>

<div data-role="page" data-theme="a">

<div data-role="header" data-position="fixed">
 <a href='#' class='ui-btn-left' data-icon='arrow-l' data-theme="c" onclick="history.back(); return false">Atrás</a>
 <h1>Servicios</h1>
</div><!-- /header -->

<div data-role="content">

<p>Services (Servicios) se ejecuta de fondo y puede ser usado para monitoriar las bases de datos en línea, puertos de comunicación local o cambios en los datos sobre el sistema de archivos.

 También pueden  desencadenar notificaciones para el usuario y el lanzamiento de aplicaciones, cuando los cambios o los tiempos de espera ocurren.</p> 
	
<p>DroidScript Services se ejecuta en un proceso independiente y puede tomar ventaja de dispositivos con múltiples CPU, esto le permite al CPU cálculos intensivos o procedimientos lentos que se hacen en el fondo sin ralentizar o interferir con la aplicación principal.</p>

<p>Cualquier archivo en el proyecto con el nombre de archivo <em>Service.js</em> se va a ejecutar como un servicio de fondo oculto.</p>

<p>Los servicios se pueden crear y empezar a usar el método <b>CreateService</b>del objeto de la <b>app</b> en el archivo principal de tu aplicación:</p>

    <div class="samp">&nbsp;svc = app.CreateService( packageName, className, callback );</div>

<p>Usa "esto" para los parámetros <em>packageName</em> y <em>className</em>.</p>

<p>Tu servicio empezará a correr cuando se cree y debe existir una aplicación en primer plano para gestionar el servicio y la aplicación en primer plano se debe ejecutar al menos una vez por el usuario.</P>

<p>Puedes ajustar el servicio para empezar automáticamente cuando el dispositivo se inicia en caso de ser necesario; con el método <b>SetAutoBoot</b> en el objeto principal de la <b>app</b>.</p>

    <div class="samp">&nbsp;app.SetAutoBoot( "Service" );</div>

    <p>Detén el servicio usando el método <b>Stop</b> (Detener).</p>

    <div class="samp">&nbsp;scv.Stop();</div>

 <p>Mensajes pueden ser enviados a partir de su aplicación para el uso del servicio, usando el método <b>SendMessage</b> de los objetos de servicio:</p>

    <div class="samp">&nbsp;scv.SendMessage( msg );</div>

<p>Necesitarás proporcionar un controlador de mensaje para recibir y procesar los mensajes (véase el siguiente ejemplo).</p>

<p>Envie mensajes del servicio a la aplicación principal usando el método <em>SendMessage</em> (Enviar Mensaje) de los objetos de la app:</p>

    <div class="samp">&nbsp;app.SendMessage( msg );</div>

<p>Esto también necesita un controlador de mensajes en la aplicación (véase el siguiente ejemplo).</p>

<p>Añadir servicios a su aplicación se hace mejor si se trabaja con el Editor WiFi (navegador IDE) porque necesitarás editar más de un archivo, y también ver el mensaje de depuración del servicio. Los mensajes de depuración y error se muestran en gris en la tabla de depuración del Editor WiFi. Al pulsar el botón 'detener' en éste IDE detendrá a ambos, al servicio y a la aplicación, pero al pulsar el botón atrás en el dispositivo se detendrá la aplicación, pero deja el servicio en funcionamiento.</p>

<p>Los siguientes ejemplos muestran como crear un simple servicio de fondo que suma o resta 1 a partir de un contador a cada segundo y envía el nuevo valor para el primer plano de aplicaciones. La principal aplicación actualiza la pantalla con el nuevo valor.</p>

<p>Hay un botón para hacer click para enviar un mensajes de "cambios" a el servicio. Cuando el servicio recibe el mensaje cuenta en la dirección opuesta.</p>

<p>Para tratar el siguiente ejemplo, crea una nueva aplicación y llámala "Background Service" (Servicio de Fondo).</p>

<p>Copia el siguiente código <em>Background Service.js</em> en el archivo principal:</p>

    <!-- Inicia el ejemplo BackgroundService.js -->
    <div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
    <h3>Background Service.js</h3>
    <div id="examp1" style="font-size:70%">
      <br>
      &nbsp;&nbsp;function OnStart()<br>
      &nbsp;&nbsp;{<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47;Crea un diseño.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;lay = app.CreateLayout( "linear", "VCenter,FillXY" );<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47;Crea control de texto para mostrar datos de los servicios.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;txt = app.CreateText( "", 0.4 );<br>
      &nbsp;&nbsp;&nbsp;&nbsp;txt.SetMargins( 0, 0.05, 0, 0 );<br>
      &nbsp;&nbsp;&nbsp;&nbsp;txt.SetTextSize( 22 );<br>
      &nbsp;&nbsp;&nbsp;&nbsp;lay.AddChild( txt );<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47;Crea un botón 'Send Message' (Enviar Mensaje).<br>
      &nbsp;&nbsp;&nbsp;&nbsp;btn = app.CreateButton( "Enviar mensaje al Servicio", 0.6, 0.1 );<br>
      &nbsp;&nbsp;&nbsp;&nbsp;lay.AddChild( btn );<br>
      &nbsp;&nbsp;&nbsp;&nbsp;btn.SetOnTouch( function(){svc.SendMessage("change")} );<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47;Crea un botón 'Stop Service' (Detener Servicio).<br>
      &nbsp;&nbsp;&nbsp;&nbsp;btn = app.CreateButton( "Stop Service", 0.6, 0.1 );<br>
      &nbsp;&nbsp;&nbsp;&nbsp;lay.AddChild( btn );<br>
      &nbsp;&nbsp;&nbsp;&nbsp;btn.SetOnTouch( function(){svc.Stop()} );<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47;Añade un diseño a la app.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;app.AddLayout( lay );<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47;Inicia/conecta a nuestro servicio.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;svc = app.CreateService( "this","this", OnServiceReady );<br>
      &nbsp;&nbsp;&nbsp;&nbsp;svc.SetOnMessage( OnServiceMessage );<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47;Esto le causa a tu servicio que inicie al arranque del dispositivo.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47;(Configuralo en "none" si necesitas detenerlo en el arranque)<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47;app.SetAutoBoot( "Service" );<br>
      &nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&#47;&#47;Llamado después que nuestro servicio ha comenzado.<br>
      &nbsp;&nbsp;function OnServiceReady()<br>
      &nbsp;&nbsp;{<br>
      &nbsp;&nbsp;&nbsp;&nbsp;console.log( "Service Ready" );<br>
      &nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&#47;&#47;Llamado cuando los mensajes provienen de nuestro servicio.<br>
      &nbsp;&nbsp;function OnServiceMessage( msg )<br>
      &nbsp;&nbsp;{<br>
      &nbsp;&nbsp;&nbsp;&nbsp;txt.SetText( "Count: " + msg );<br>
      &nbsp;&nbsp;}<br>
    <br>

    </div>
    <div name="divCopy" align="right">
    <a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp1)">Copiar Todo</a>
    </div>
    </div> <!-- Fin del ejemplo BackgroundService.js -->

<p>Crea un nuevo archivo <em>Service.js</em> en la carpeta de tu aplicación y copia el siguiente código adentro:</p>

    <!-- Inicia el ejemplo de la página Service.js -->
    <div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
    <h3>Service.js</h3>
    <div id="examp2" style="font-size:70%">
    <br>
    &nbsp;&nbsp;&#47;&#47;Init variables.<br>
    &nbsp;&nbsp;var count = 0;<br>
    &nbsp;&nbsp;var diff = 1;<br>
    <br>
    &nbsp;&nbsp;&#47;&#47;Llamada cuando el servicio se inicia.<br>
    &nbsp;&nbsp;function OnStart()<br>
    &nbsp;&nbsp;{<br>
  	&nbsp;&nbsp;&nbsp;&nbsp;app.ShowPopup( "Hola del Servicio!" );<br>
    <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47;Inicia un contador de tiempo para hacer algún trabajo regular.<br>
    &nbsp;&nbsp;&nbsp;&nbsp;setInterval( DoWork, 1000 );<br>
    &nbsp;&nbsp;}<br>
    <br>
    &nbsp;&nbsp;&#47;&#47;Llamada cuando tenemos un mensaje de la aplicación principal. <br>
    &nbsp;&nbsp;function OnMessage( msg )<br>
    &nbsp;&nbsp;{<br>
    &nbsp;&nbsp;&nbsp;&nbsp;console.log( msg );<br>
    <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47;Manejar los comandos de la aplicación principal. <br>
    &nbsp;&nbsp;&nbsp;&nbsp;if( msg=="change" ) diff = (diff > 0 ? -1 : 1);<br>
    &nbsp;&nbsp;}<br>
    <br>
    &nbsp;&nbsp;&#47;&#47;Hacer algunos trabajo.<br>
    &nbsp;&nbsp;function DoWork()<br>
    &nbsp;&nbsp;{<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47;Aquí es donde hacemos algunas tareas regulares de fondo<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47;(Aquí acabamos de modificar el contador).<br>
    &nbsp;&nbsp;&nbsp;&nbsp;count +=  diff;<br>
    <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47;Enviaremos los datos de la aplicación (si se está ejecutando).<br>
    &nbsp;&nbsp;&nbsp;&nbsp;app.SendMessage( count );<br>
    &nbsp;&nbsp;}<br>
    <br>
  </div>
    <div name="divCopy" align="right">
    <a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp2)">Copiar Todo</a>
    </div>
  </div> <!-- Fin del ejemplo de la página Service.js -->

<p>Ejecutar la aplicación y ver el recuento de incremento a cada segundo. Haz click en el botón <em>Send Message to Service</em> (Enviar mensaje al servicio) y mira como la dirección del contador cambia.</p>

<p>Inspeccione la depuración de la consola y mire los mensajes de registro del servicio en gris.</p>

<p>Los siguientes métodos están disponibles en los objetos de Servicio:</p>

    <div class="samp">&nbsp;Stop()</div>
    <div class="samp">&nbsp;SendMessage( msg )</div>
    <div class="samp">&nbsp;SetOnMessage( callback )</div>
	<br>

  </div><!-- /content -->

</div><!-- /page -->

</body>
</html>
