<!DOCTYPE html>
<html>

<head>
<title>Servidor Web</title>
<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet"  href="../css/themes/default/theme.min.css" />
<link rel="stylesheet"  href="../css/themes/default/jquery.mobile.structure-1.2.0.min.css" />
<script src="../js/energize-min.js"></script>
<script src="../js/jquery-1.8.1.min.js"></script>
<script src="../../../app.js"></script>
<script src="../js/example.js"></script>
<link rel="stylesheet" href="../css/docs.css" />
<script src="../js/common.js"></script>
<script src="../js/jquery.mobile-1.2.0.min.js"></script>

</head>

<body>

<div data-role="page" data-theme="a">

<div data-role="header" data-position="fixed">
 <a href='#' class='ui-btn-left' data-icon='arrow-l' data-theme="c" onclick="history.back(); return false">Atrás</a>
 <h1>Servidor Web</h1>
</div><!-- /header -->

<div data-role="content">

 <p>Los servidores webs forman la fundación de la web, especialmente el 'Internet of Things' (IoT o Internet de las Cosas). 

 Tornar tu celular o tableta en un servidor web o crear una red de dispositivos interconectados es muy simple con DroidScript.</p>

<p>Crea un componente de servidor web usando el método <b>CreateWebServer</b> del objeto de la <b>app</b>:<p>
    <div class="samp">&nbsp;wbs = app.CreateWebServer( port, options );</div>

 <p>Lo siguiente son <em>opciones</em> válidas para el método <b>CreateWebServer</b>:
      <ul>
        <li>"ListDir" - Mostrar archivos en las carpetas</li>
        <li>"Upload" - Permitir subir archivos</li>
        <li>"NoWelcome" -	Ignora index.html</li>
        <li>"Reflect" - Refleja los mensajes web socket de vuelta a todos los clientes</li>
      </ul>
    </p>

<p>Establece la raíz del documento para el servidor usando el método <b>SetFolder</b> del objeto <b>WebServer</b>. Esta es la ubicación de la carpeta en su dispositivo de la que sus páginas web se servirán.</p>

    <div class="samp">&nbsp;wbs.SetFolder( path );</div>

    <p>Inicia el servidor usando el método <b>Start</b>.</p>

    <div class="samp">&nbsp;wbs.Start();</div>

    <p>Y detenlo usando el método <b>Stop</b>.</p>

    <div class="samp">&nbsp;wbs.Stop();</div>

<p>El siguiente ejemplo muestra como crear un servidor web básico para servir las páginas a través del WiFi de tu dispositivo. Se sirve en una página web de demostración construida.</p>

<p>Para simplificar algunas de las características de la página de demostración no funcionarán en este primer ejemplo. Pruebelos y podrás ver cómo el servidor presenta errores. El siguiente ejemplo muestra cómo manejar todas las características de la página de demostración.</p>

    <!-- Start of example app -->
    <div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
    <h3>Ejemplo</h3>
    <div id="examp1" style="font-size:70%">
      <br>
    function OnStart()  <br>
    { <br>
    &nbsp;&nbsp;var ip = app.GetIPAddress();<br>
    <br>
    &nbsp;&nbsp;if( ip == "0.0.0.0" )<br>
    &nbsp;&nbsp;{<br>
    &nbsp;&nbsp;&nbsp;&nbsp;alert( "Por favor activa el Wi-Fi" );<br>
    &nbsp;&nbsp;&nbsp;&nbsp;app.Exit();<br>
    &nbsp;&nbsp;}<br>
    &nbsp;&nbsp;lay = app.CreateLayout( "linear", "VCenter,FillXY" );<br>
    <br>
    &nbsp;&nbsp;var s = "Escribe la siguiente dirección en tu" +<br>
    &nbsp;&nbsp;&nbsp;&nbsp;" navegador\n\n" + ip +":8080";<br>
    &nbsp;&nbsp;txt = app.CreateText( s, 0.8, 0.5, "MultiLine" );<br>
    &nbsp;&nbsp;txt.SetTextSize( 22 );<br>
    &nbsp;&nbsp;lay.AddChild( txt );<br>
    <br>
    &nbsp;&nbsp;app.AddLayout( lay );<br>
    <br>
    <b id="snip1"  style="font-size:100%">
    &nbsp;&nbsp;serv = app.CreateWebServer( 8080 );<br>
    &nbsp;&nbsp;serv.SetFolder( "/sdcard/DroidScript" );<br>
    &nbsp;&nbsp;serv.Start();<br>
    </b>
    }<br>
    <br>

    </div>
    <div name="divCopy" align="right">
    <a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip1)">&nbsp;&nbsp;Copiar&nbsp;&nbsp;</a>
    <a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp1)">Copiar Todo</a>
    <a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp1)">&nbsp;&nbsp;&nbsp;Ver&nbsp;&nbsp;&nbsp;</a>
    </div>
    </div> <!-- end of example app -->

    <p>The second example shows how to accept file upload and permit directory listings by including permissions in the <em>options</em> parameter of the <b>app.CreateWebServer</b> method.</p>

    <p>It also adds a servlet to respond to messsages from the web client. A servelet can be used to process data supplied by a user via form elements or it can handle requests made from the client application.</p>

    <p>To get a better understanding of how client - server messaging works you can view the source of the served demo page and the network view in the developer tools of your favorite browser to see how the simple GET request is sent from the client browser to the servlet for processing by the <b>OnServlet</b> function when the <em>Send Message</em> button is clicked.</p>

    <!-- Start of second example app -->
    <div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
    <h3>Example</h3>
    <div id="examp2" style="font-size:70%">
    <br>
    function OnStart()  <br>
    { <br>
    &nbsp;&nbsp;var ip = app.GetIPAddress();<br>
    <br>
    &nbsp;&nbsp;if( ip == "0.0.0.0" )<br>
    &nbsp;&nbsp;{<br>
    &nbsp;&nbsp;&nbsp;&nbsp;alert( "Please Enable Wi-Fi" );<br>
    &nbsp;&nbsp;&nbsp;&nbsp;app.Exit();<br>
    &nbsp;&nbsp;}<br><br>
    &nbsp;&nbsp;lay = app.CreateLayout( "linear", "VCenter,FillXY" );<br>
    <br>
    &nbsp;&nbsp;var s = "Type the following address into your" +<br>
    &nbsp;&nbsp;&nbsp;&nbsp;" browser\n\n" + ip +":8080";<br>
    &nbsp;&nbsp;txt = app.CreateText( s, 0.8, 0.5, "MultiLine" );<br>
    &nbsp;&nbsp;txt.SetTextSize( 22 );<br>
    &nbsp;&nbsp;lay.AddChild( txt );<br>
    <br>
    &nbsp;&nbsp;app.AddLayout( lay );<br>
    <br>
    <b id="snip2"  style="font-size:100%">
    &nbsp;&nbsp;serv = app.CreateWebServer( 8080, "Upload,ListDir" );<br>
    &nbsp;&nbsp;serv.SetFolder( "/sdcard/DroidScript" );<br>
    &nbsp;&nbsp;serv.AddServlet( "/message", OnServlet );<br>
    &nbsp;&nbsp;serv.Start();<br>
    </b>
    }<br>
    <br>
    &nbsp;&nbsp;function OnServlet( request, info )<br>
    &nbsp;&nbsp;{<br>
    &nbsp;&nbsp;	serv.SetResponse( "Got it!" );<br>
    &nbsp;&nbsp;	app.ShowPopup(  info.remoteAddress + " says: " + request.msg );<br>
    &nbsp;&nbsp;}<br>
    <br>

    </div>
    <div name="divCopy" align="right">
    <a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip2)">&nbsp;&nbsp;Copy&nbsp;&nbsp;</a>
    <a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp2)">Copy All</a>
    <a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp2)">&nbsp;&nbsp;&nbsp;Run&nbsp;&nbsp;&nbsp;</a>
    </div>
    </div> <!-- end of second example app -->

    <p>Web sockets are faster than servlets and can be used for both client - server applications or peer-to-peer systems where each connected node is both a client and a server without a centralized server.</p>

    <p>This makes web sockets very useful for datasharing in multiplayer games.</p>

    <p>All requests sent to the same servlet will queue up behind each other and are processed in order. The server application is said to be blocking all other requests whilst a servlet completes each task synchronously.</p>

    <p>Web sockets recieve the request and then start a process to handle the request. When the task is complete any data or messages to be returned will be sent back to the relevant connected clients. In this case the server application is said to be non-blocking or asynchronous.</p>

    <p>Web sockets can be used for broadcast purposes, for example sending the same message to all connected clients. They can also be used to send different direct messages to a specific one device using the IP address.</p>


    <p>The following example demonstrates web sockets being used to receive messages from and broadcasting messages to connected devices. It consists of two files.</p>

    <p>Create a new App and call it WebSockets.</p>

    <p>Create a new file called <em>index.html</em> in your application folder and copy the following code into it:</p>

    <!-- Start of index.html page -->
    <div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
    <h3>index.html</h3>
    <div id="examp3" style="font-size:70%">
    <br>
    &nbsp;&nbsp;&lt;html&gt;<br>
    &nbsp;&nbsp;&lt;head&gt;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;WebSockets Demo&lt;/title&gt;<br>
    <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&lt;script&gt;<br>
    <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 0;<br>
    <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47;Connect to server via web sockets.<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function Connect()<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47;Check web sockets are supported.<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!window.WebSocket)<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert("WebSocket not supported by this browser");<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
    <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47;Open web socket to phone.<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ws = new WebSocket( "ws://"+window.location.host );<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ws.onopen = ws_onopen;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ws.onmessage = ws_onmessage;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ws.onclose = ws_onclose;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ws.onerror = ws_onerror;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
    <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47;Send a message to the server.<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function Send()<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ws.send( "Hello " + count++ );<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
    <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47;Handle socket open.<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function ws_onopen()<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id_info.innerHTML = "Socket Open";<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
    <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47;Handle messages from phone.<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function ws_onmessage( msg )<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id_info.innerHTML = msg.data;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
    <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47;Other websocket callbacks.<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function ws_onclose()<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id_info.innerHTML = "Socket Closed";<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
    <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function ws_onerror(e)<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id_info.innerHTML = "Socket Error: " + e.data;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&lt;/script&gt;<br>
    &nbsp;&nbsp;&lt;/head&gt;<br>
    <br>
    &nbsp;&nbsp;&lt;body&gt;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&lt;h2&gt;DroidScript WebSockets Demo&lt;/h2&gt;<br>
    <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&lt;div id="id_info"&gt;Ready&lt;/div&gt;<br>
    <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&lt;button onclick="Connect()"&gt;Connect&lt;/button&gt;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&lt;button onclick="Send()"&gt;Send Message&lt;/button&gt;<br>
    <br>
    &nbsp;&nbsp;&lt;/body&gt;<br>
    &lt;/html&gt;<br>

    </div>
    <div name="divCopy" align="right">
    <a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp3)">Copy All</a>
    </div>
  </div> <!-- end of index.html page -->

    <p>Copy the following code into your main <em>WebSockets.js</em> application file.</p>

    <!-- Start of WebSockets.js page -->
    <div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
    <h3>WebSockets.js</h3>
    <div id="examp4" style="font-size:70%">
      <br>
      &nbsp;&nbsp;&#47;&#47; Init variables.<br>
      &nbsp;&nbsp;var count = 0;<br>
      <br>
      &nbsp;&nbsp;&#47;&#47; Called when application is started.<br>
      &nbsp;&nbsp;function OnStart()<br>
      &nbsp;&nbsp;{<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47; Check wifi is enabled.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;ip = app.GetIPAddress();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;if( ip == "0.0.0.0" ) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.ShowPopup( "Please Enable Wi-Fi" );<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.Exit();<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47; Prevent wifi from powering down.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;app.PreventWifiSleep();<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47; Create a layout with objects vertically centered.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;lay = app.CreateLayout( "linear", "VCenter,FillXY" );<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47; Create a text label and add it to layout.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;var s = "Type the following address into your" +<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" browser(s)\n\n" + ip +":8080";<br>
      &nbsp;&nbsp;&nbsp;&nbsp;txt = app.CreateText( s, 0.8, 0.3, "AutoScale,MultiLine" );<br>
      &nbsp;&nbsp;&nbsp;&nbsp;txt.SetTextSize( 22 );<br>
      &nbsp;&nbsp;&nbsp;&nbsp;lay.AddChild( txt );<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47; Create a text label and add it to layout.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;txtMsg = app.CreateText( "", 0.8, 0.3, "AutoScale,MultiLine" );<br>
      &nbsp;&nbsp;&nbsp;&nbsp;txtMsg.SetTextSize( 22 );<br>
      &nbsp;&nbsp;&nbsp;&nbsp;lay.AddChild( txtMsg );<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47; Create a 'Send Message' button.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;btn = app.CreateButton( "Send Message", 0.4, 0.1);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;btn.SetMargins( 0, 0.05, 0, 0 );<br>
      &nbsp;&nbsp;&nbsp;&nbsp;btn.SetOnTouch( SendMessage );<br>
      &nbsp;&nbsp;&nbsp;&nbsp;lay.AddChild( btn );<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47; Add layout to app.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;app.AddLayout( lay );<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47; Create and run web server on port 8080.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;serv = app.CreateWebServer( 8080 );<br>
      &nbsp;&nbsp;&nbsp;&nbsp;serv.SetFolder( "/sdcard/DroidScript/WebSockets" );<br>
      &nbsp;&nbsp;&nbsp;&nbsp;serv.SetOnReceive( serv_OnReceive );<br>
      &nbsp;&nbsp;&nbsp;&nbsp;serv.Start();<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47; Start timer to show WebSock connections.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;setInterval( ShowConnections, 3000 );<br>
      &nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&#47;&#47; Show who is connected.<br>
      &nbsp;&nbsp;function ShowConnections()<br>
      &nbsp;&nbsp;{<br>
      &nbsp;&nbsp;&nbsp;&nbsp;var clients = serv.GetWebSockClients();<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;if( clients.length > 0 )<br>
      &nbsp;&nbsp;&nbsp;&nbsp;{<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47; Make a list of clients.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var list = "";<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for( var i=0; i < clients.length; i++ )<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list += clients[i].remoteAddress + "\n";<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47; Show client list.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;txt.SetText( list );<br>
      &nbsp;&nbsp;&nbsp;&nbsp;}<br>
      &nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&#47;&#47; Send a message to all connected socket clients.<br>
      &nbsp;&nbsp;function SendMessage()<br>
      &nbsp;&nbsp;{<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47; Note: You can send to a specific client by passing<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&#47;&#47; the IP address as the second parameter.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;serv.SendText( "Hello " + count++ )<br>
      &nbsp;&nbsp;}<br>
      <br>
      &nbsp;&nbsp;&#47;&#47; Called when messages arrive from websocket clients.<br>
      &nbsp;&nbsp;function serv_OnReceive( msg, ip )<br>
      &nbsp;&nbsp;{<br>
      &nbsp;&nbsp;&nbsp;&nbsp;txtMsg.SetText( ip + ": " + msg );<br>
      &nbsp;&nbsp;}<br>
      <br>

    </div>
    <div name="divCopy" align="right">
    <a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp4)">Copy All</a>
    </div>
    </div> <!-- end of WebSockets.js page -->


    <p>The following methods are available on the WebServer object:</p>

    <div class="samp">&nbsp;SetFolder( folder )</div>
    <div class="samp">&nbsp;SetUploadFolder( folder )</div>
    <div class="samp">&nbsp;Start()</div>
    <div class="samp">&nbsp;Stop()</div>
    <div class="samp">&nbsp;SetResponse( text )</div>
    <div class="samp">&nbsp;AddRedirect( pattern,location )</div>
    <div class="samp">&nbsp;AddServlet( path,callback )</div>
    <div class="samp">&nbsp;SendText( txt, ip )</div>
    <div class="samp">&nbsp;GetWebSockClients()</div>
    <div class="samp">&nbsp;SetOnReceive( callback )</div>

  </div><!-- /content -->

</div><!-- /page -->

</body>
</html>
