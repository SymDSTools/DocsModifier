
<!DOCTYPE html> 
<html>

<head>
	<title>GLView</title> 
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1"> 
		<link rel="stylesheet" href="css/themes/default/theme.min.css" />
		<link rel="stylesheet" href="css/themes/default/jquery.mobile.structure-1.2.0.min.css" />
		<script src="js/energize-min.js"></script>
		<script src="js/jquery-1.8.1.min.js"></script>
		
		<script src="../../app.js"></script>
		<script src="js/example.js"></script>
		<link rel="stylesheet" href="css/docs.css" />
		<script src="js/common.js"></script>
		<script src="js/jquery.mobile-1.2.0.min.js"></script>
</head> 

<body> 

<div data-role="page" data-theme="a">

	<div data-role="header" data-position="fixed">
		<a href='#' class='ui-btn-left' data-icon='arrow-l' data-theme="c" onclick="history.back(); return false">Atrás</a> <h1>GLView</h1>
	</div><!-- /header -->

	<div data-role="content">	
			
		<p>GLView es un lienzo rápido en 2D adecuado para la elaboración y movimiento de gráficos alrededor de la pantalla de forma rápida, ideal para los Juegos.</p>

		<p>Puedes crear un objeto GLView usando el método <b>CreateGLView</b> de los objetos de la <b>app</b>: </p>
		
		<div class="samp">&nbsp;glview = app.CreateGLView( width, height, options );</div>

		<p>Las opciones de parámetros deben ser configurados en <b>"Fast2d"</b>.</p>

		<p>Use el método <b>CreateImage</b> del objeto GLView para crear una imagen que pueda ser usada con el GLView:</p>

		<div class="samp">&nbsp;glview.CreateImage( fileName, callback );</div>

		<p>Pasa el nombre de una función a CreateImage, para que sea llamada una vez que la imagen esté lista para usar.</p>

		<p>El método <b>DrawImage</b> puede ser usado para dibujar imagenes GLView:</p>

		<div class="samp">&nbsp;glview.DrawImage( image, x, y, width, height, angle );</div>

		<p>Una vez que todos los dibujos se han hecho, el método <b>Render</b> será llamado para reenderizar todos los graficos GLView en la pantalla.</p>
		
		<div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
				<h3>Ejemplo - DrawImage</h3>
				<div id="examp1" style="font-size:70%">
					function OnStart()<br>
					{<br>
					&nbsp;&nbsp;lay = app.CreateLayout( "Linear", "FillXY" );<br>
					<br>
					<b id="snip1"  style="font-size:100%">
					&nbsp;&nbsp;glview = app.CreateGLView( 1, 1, "Fast2d" );<br>
					&nbsp;&nbsp;lay.AddChild( glview );<br>
					<br>
					&nbsp;&nbsp;img = glview.CreateImage( "/Sys/Img/Hello.png", DrawFrame );<br>
					</b>
					<br>
					&nbsp;&nbsp;app.AddLayout( lay );<br>
					}<br>
					<br>
					function DrawFrame()<br>
					{<br>
					&nbsp;&nbsp;glview.DrawImage( img, 0.25, 0.3, 0.5, -1, 45 );<br>
					<br>
					&nbsp;&nbsp;glview.Render();<br>
					}<br>
				</div>
				<div name="divCopy" align="right">
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip1)">&nbsp;&nbsp;Copiar&nbsp;&nbsp;</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp1)">Copiar Todo</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp1)">&nbsp;&nbsp;&nbsp;Ver&nbsp;&nbsp;&nbsp;</a>
				</div>
		</div>

		<p>Para crear una representación bucle para un juego, use la función JavaScript <b>setInterval</b> para llamar a la función de su dibujo a intervalos regulares.</p>

		<p>El siguiente ejemplo dibuja una forma continua de rotación de la imagen llamando la función <b>DrawFrame</b> 30 veces cada segundo, actualizando el angúlo cada tiempo:</p>
		
		<div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
				<h3>Ejemplo - Render Loop</h3>
				<div id="examp2" style="font-size:70%">
					var angle = 0;<br>
					<br>
					function OnStart()<br>
					{<br>
					&nbsp;&nbsp;lay = app.CreateLayout( "Linear", "FillXY" );<br>
					<br>
					<b id="snip2"  style="font-size:100%">
					&nbsp;&nbsp;glview = app.CreateGLView( 1, 1, "Fast2d" );<br>
					&nbsp;&nbsp;lay.AddChild( glview );<br>
					<br>
					&nbsp;&nbsp;img = glview.CreateImage( "/Sys/Img/Hello.png", StartRendering );<br>
					</b>
					<br>
					&nbsp;&nbsp;app.AddLayout( lay );<br>
					}<br>
					<br>
					function StartRendering()<br>
					{<br>
					&nbsp;&nbsp;setInterval( DrawFrame, 1000/30 );<br>
					}<br>
					<br>
					function DrawFrame()<br>
					{<br>
					&nbsp;&nbsp;glview.DrawImage( img, 0.25, 0.3, 0.5, -1, angle );<br>
    				<br>
				    &nbsp;&nbsp;angle = angle + 10;<br>
				    &nbsp;&nbsp;if( angle == 360 ) angle = 0;<br>
					<br>
					&nbsp;&nbsp;glview.Render();<br>
					}<br>
				
				</div>
				<div name="divCopy" align="right">
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip2)">&nbsp;&nbsp;Copiar&nbsp;&nbsp;</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp2)">Copiar Todo</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp2)">&nbsp;&nbsp;&nbsp;Ver&nbsp;&nbsp;&nbsp;</a>
				</div>
		</div>

		<p>GLView soporta el uso de <b>Sprite Sheets</b>. El método <b>DrawSprite</b> puede usarse para dibujar parte de una imagen al GLView.</p>

		<p>El siguiente ejemplo usa un <i>sprite sheet</i> que contiene 8 etapas de un personaje corriendo. El método DrawSprite es usado para dibujar cada una de las 8 secciones en turno para darle el efecto al personaje que corre continuamente:</p>

		<div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
				<h3>Ejemplo - DrawSprite</h3>
				<div id="examp3" style="font-size:70%">
					var spriteCount = 8;<br>
					var srcWidth = 50;<br>
					var srcHeight = 60;<br>
					var frameCount = 0;<br>
					<br>
					function OnStart()<br>
					{<br>
					&nbsp;&nbsp;lay = app.CreateLayout( "Linear", "FillXY" );<br>
					<br>
					<b id="snip3"  style="font-size:100%">
					&nbsp;&nbsp;glview = app.CreateGLView( 1, 1, "Fast2d" );<br>
					&nbsp;&nbsp;lay.AddChild( glview );<br>
					<br>
					&nbsp;&nbsp;img = glview.CreateImage( "/Sys/Img/Sprint.png", StartRendering );<br>
					</b>
					<br>
					&nbsp;&nbsp;app.AddLayout( lay );<br>
					}<br>
					<br>
					function StartRendering()<br>
					{<br>
					&nbsp;&nbsp;setInterval(DrawFrame, 1000/30);<br>
					}<br>
					<br>
					function DrawFrame()<br>
					{<br>
					&nbsp;&nbsp;var spriteIndex = Math.floor(frameCount / 2) % spriteCount;<br>
					<br>
					&nbsp;&nbsp;var sx = spriteIndex * srcWidth;<br>
					&nbsp;&nbsp;var sy = 0;<br>
					<br>
					&nbsp;&nbsp;glview.DrawSprite( img, sx, sy, srcWidth, srcHeight,<br>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.3, 0.4, 0.3, -1 );<br>
					<br>
					&nbsp;&nbsp;glview.Render();<br>
					<br>
					&nbsp;&nbsp;frameCount++;<br>
					}				
				</div>
				<div name="divCopy" align="right">
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip3)">&nbsp;&nbsp;Copiar&nbsp;&nbsp;</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp3)">Copiar Todo</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp3)">&nbsp;&nbsp;&nbsp;Ver&nbsp;&nbsp;&nbsp;</a>
				</div>
		</div>
		 
		<p>Los siguientes métodos están disponibles en el objeto GLView:</p>
		
		<div class="samp">&nbsp;SetOnTouch( callback )</div>
   		<div class="samp">&nbsp;SetOnTouchUp( callback )</div>
    	<div class="samp">&nbsp;SetOnTouchMove( callback )</div>
    	<div class="samp">&nbsp;SetOnTouchDown( callback )</div>
    	<div class="samp">&nbsp;SetTouchable( touchable )</div>
		<div class="samp">&nbsp;DrawImage( image, x, y, width, height, angle )</div>
		<div class="samp">&nbsp;DrawSprite( sheet, sx, sy, sw, sh, dx, dy, dw, dh )</div>
		<div class="samp">&nbsp;CreateImage( fileName, callback )</div>
		<div class="samp">&nbsp;Render()</div>
		<div class="samp">&nbsp;GetContext()</div>

		<br>
		
	</div><!-- /content -->
	
</div><!-- /page -->

</body>
</html>