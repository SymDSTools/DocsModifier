
<!DOCTYPE html> 
<html>

<head>
	<title>Diseños</title> 
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1"> 
		<link rel="stylesheet"  href="css/themes/default/theme.min.css" />
		<link rel="stylesheet"  href="css/themes/default/jquery.mobile.structure-1.2.0.min.css" />
		<script src="js/energize-min.js"></script>
		<script src="js/jquery-1.8.1.min.js"></script>
		
		<script src="../../app.js"></script>
		<script src="js/example.js"></script>
		<link rel="stylesheet" href="css/docs.css" />
		<script src="js/common.js"></script>
		<script src="js/jquery.mobile-1.2.0.min.js"></script>
</head> 

<body> 

<div data-role="page" data-theme="a" >

	<div data-role="header" data-position="fixed">
		<a href='#' class='ui-btn-left' data-icon='arrow-l' data-theme="c" onclick="history.back(); return false">Atrás</a> <h1>Diseños</h1>
	</div><!-- /header -->

	<div data-role="content">	
		<p>Los Layouts (Diseños) son contenedores de objetos que se utilizan para organizar gráficos, como texto, botones e imágenes en la pantalla. Hay 3 tipos de Layout: <b>"Linear"</b>, <b>"Frame"</b> y <b>"Absolute"</b>. </p>
		
		<p>Los Layouts son transparentes por defecto, pero puedes configurar un fondo de imagen que puede llenar el diseño. También se puede establecer un color de fondo o fondo gradiente.</p> 
		
		<p>Crea layouts usando la función <b>CreateLayout</b> de los objetos de la app:</p>
		<div class="samp">&nbsp;lay = app.CreateLayout( type, options );</div>
		
		<p>Crea objetos hijos (Child Object) a los Layout usando la función <b>AddChild</b> al objeto Layout.</p>
		<div class="samp">&nbsp;lay.AddChild( object );</div>
		
		<p>El aliniamiento de los objetos hijos dentro del layout se establece por <b>"Left"</b>, <b>"Right"</b>, <b>"Bottom"</b> y <b>"VCenter"</b>, por defecto los objetos se alinean <b>"Top,Center"</b>.</p>
		
		<p>Elimina los layouts usando la función <b>RemoveLayout</b> de los objetos de la app:</p>
		<div class="samp">&nbsp;app.RemoveLayout( lay );</div>
		
		<h3>Diseño Lineal</h3>
		<p>El diseño lineal es probablemente el más útil y se utiliza para organizar los controles en cualquier dirección <b>"Vertical"</b> o <b>"Horizontal"</b> en la pantalla.</p>
		
		<div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
			<h3>Ejemplo - Vertical</h3>
			<div id="examp1" style="font-size:70%">
				function OnStart()<br>
				{<br>
				 <b id="snip1"  style="font-size:105%">
				  &nbsp;&nbsp;lay = app.CreateLayout( "Linear", "Vertical" );<br><br>
				 </b>
				 &nbsp;&nbsp;btnA = app.CreateButton( "A", 0.2, 0.1 );<br>				
				 &nbsp;&nbsp;lay.AddChild( btnA );<br><br>
				 &nbsp;&nbsp;btnB = app.CreateButton( "B", 0.2, 0.1 );<br>				
				 &nbsp;&nbsp;lay.AddChild( btnB );<br><br>
				 &nbsp;&nbsp;btnC = app.CreateButton( "C", 0.2, 0.1 );<br>				
				 &nbsp;&nbsp;lay.AddChild( btnC );<br><br>
				 
				 &nbsp;&nbsp;app.AddLayout( lay );<br>
				}<br>
			</div>
			<div name="divCopy" align="right">
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip1)">&nbsp;&nbsp;Copiar&nbsp;&nbsp;</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp1)">Copiar Todo</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp1)">&nbsp;&nbsp;&nbsp;Ver&nbsp;&nbsp;&nbsp;</a>
			</div>
		</div>
		
		<div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
			<h3>Ejemplo - Horizontal</h3>
			<div id="examp2" style="font-size:70%">
				function OnStart()<br>
				{<br>
				 <b id="snip2"  style="font-size:105%">
				  &nbsp;&nbsp;lay = app.CreateLayout( "Linear", "Horizontal,FillXY" );<br><br>
				 </b>
				 &nbsp;&nbsp;btnA = app.CreateButton( "A", 0.2, 0.1 );<br>				
				 &nbsp;&nbsp;lay.AddChild( btnA );<br><br>
				 &nbsp;&nbsp;btnB = app.CreateButton( "B", 0.2, 0.1 );<br>				
				 &nbsp;&nbsp;lay.AddChild( btnB );<br><br>
				 &nbsp;&nbsp;btnC = app.CreateButton( "C", 0.2, 0.1 );<br>				
				 &nbsp;&nbsp;lay.AddChild( btnC );<br><br>
				 
				 &nbsp;&nbsp;app.AddLayout( lay );<br>
				}<br>
			</div>
			<div name="divCopy" align="right">
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip2)">&nbsp;&nbsp;Copiar&nbsp;&nbsp;</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp2)">Copiar Todo</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp2)">&nbsp;&nbsp;&nbsp;Ver&nbsp;&nbsp;&nbsp;</a>
			</div>
		</div>
		
		<p>Por defecto, los Layouts se ajustan automáticamente para envolver la pantalla, pero tienes 3 opciones más de tamaños dentro de su padre:- <b>"FillX"</b>, <b>"FillY"</b> and <b>"FillXY"</b>.</p>	
		
		<div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
			<h3>Ejemplo - Combinado</h3>
			<div id="examp3" style="font-size:70%">
				function OnStart()<br>
				{<br>
				 &nbsp;&nbsp;layVert = app.CreateLayout( "Linear", "Vertical,FillXY" );<br><br>
				 
				 &nbsp;&nbsp;btnA = app.CreateButton( "A", 0.6, 0.1 );<br>					 
				 &nbsp;&nbsp;layVert.AddChild( btnA );<br><br>
				 <b id="snip3"  style="font-size:105%">
				 &nbsp;&nbsp;layHoriz = app.CreateLayout( "Linear", "Horizontal" );<br>
				 </b>
				 &nbsp;&nbsp;layVert.AddChild( layHoriz );<br><br>
				 &nbsp;&nbsp;btnB1 = app.CreateButton( "B1", 0.2, 0.1 );<br>				
				 &nbsp;&nbsp;layHoriz.AddChild( btnB1 );<br>
				 &nbsp;&nbsp;btnB2 = app.CreateButton( "B2", 0.2, 0.1 );<br>				
				 &nbsp;&nbsp;layHoriz.AddChild( btnB2 );<br>
				 &nbsp;&nbsp;btnB3 = app.CreateButton( "B3", 0.2, 0.1 );<br>				
				 &nbsp;&nbsp;layHoriz.AddChild( btnB3 );<br><br>
				 
				 &nbsp;&nbsp;btnC = app.CreateButton( "C", 0.6, 0.1 );<br>				
				 &nbsp;&nbsp;layVert.AddChild( btnC );<br><br>
				 
				 &nbsp;&nbsp;app.AddLayout( layVert );<br>
				}<br>
			</div>
			<div name="divCopy" align="right">
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip3)">&nbsp;&nbsp;Copiar&nbsp;&nbsp;</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp3)">Copiar Todo</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp3)">&nbsp;&nbsp;&nbsp;Ver&nbsp;&nbsp;&nbsp;</a>
			</div>
		</div>
		
		<h3>Marco de Diseños</h3>
		<p>Los Marcos de Diseños (Frame Layout) se utilizan para mostrar los objetos en frente o detrás de los otros. Cada vez que una función <b>AddChild</b> (Añadir Hijo) es llamada en un Marco de Diseño, el objeto hijo se coloca en una nueva capa <b>en frente</b> de los objetos añadidos anteriormente en la parte superior izquierda de la estructura.</p>

		<p>Los Marcos de Diseños son útiles si deseas hacer <b>Flips animados</b> o <b>Slides</b> (Diapositivas) para revelar las capas de objetos o usar <b>transparencia</b>.</p>
		
		<div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
			<h3>Ejemplo - Intercambiar Imagen</h3>
			<div id="examp4" style="font-size:70%">
				function OnStart()<br>
				{<br>
				&nbsp;&nbsp;lay = app.CreateLayout( "Linear", "VCenter,FillXY" );<br><br>
				<br>
				<b id="snip4"  style="font-size:100%">
				&nbsp;&nbsp;layFrm = app.CreateLayout( "Frame" );<br>
				</b>
				&nbsp;&nbsp;img1 = app.CreateImage( "/Sys/Img/Droid1.png", 0.5 );<br>
				&nbsp;&nbsp;layFrm.AddChild( img1 );<br>
				<br>
				&nbsp;&nbsp;img2 = app.CreateImage( "/Sys/Img/Hello.png", 0.5 );<br>
				&nbsp;&nbsp;img2.SetVisibility( "Hide" );<br>
				&nbsp;&nbsp;layFrm.AddChild( img2 );<br>
				&nbsp;&nbsp;lay.AddChild( layFrm );<br>
				<br>
				&nbsp;&nbsp;btn = app.CreateButton( "Tócame" );<br>
				&nbsp;&nbsp;btn.SetMargins( 0,0.1,0,0 );<br>
				&nbsp;&nbsp;btn.SetOnTouch( btn_OnTouch );<br>
				&nbsp;&nbsp;lay.AddChild( btn );<br>
				 <br>
				&nbsp;&nbsp;app.AddLayout( lay );<br>
				}<br>
				<br>
				function btn_OnTouch()<br>
				{<br>
					&nbsp;&nbsp;if( img2.GetVisibility()=="Hide" )<br>
					&nbsp;&nbsp;&nbsp;img2.SetVisibility( "Show" );<br>
					&nbsp;&nbsp;else <br>
					&nbsp;&nbsp;&nbsp;img2.SetVisibility( "Hide" );<br>
				}<br>
			</div>
			<div name="divCopy" align="right">
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip4)">&nbsp;&nbsp;Copiar&nbsp;&nbsp;</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp4)">Copiar Todo</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp4)">&nbsp;&nbsp;&nbsp;Ver&nbsp;&nbsp;&nbsp;</a>
			</div>
		</div>
		
		<h3>Diseños Absolutos</h3>
		<p>Los Diseños Absolutos ignoran todas las opciones de alineamiento y permiten el posicionamiento absoluto de los controles, llamando cada función <b>SetPosition</b> y <b>SetSize</b> de cada hijo de los objetos.  Éste tipo de diseño rara vez es utilizado y se alienta el uso de los Diseños Lineales para la mayoría de sus programas.</p>
		
		<h3>Relleno y Márgenes</h3>
		<p>En los Diseños, Lineal y Marco, puedes usar la función <b>SetPadding</b> para mantener los hijos de los objetos de los diseños lejos de los bordes del diseño:</p>
		<div class="samp">&nbsp;lay.SetPadding( left, top, right, bottom );</div>
		
		<p>Además, cada hijo del objeto dentro de un diseño puede tener márgenes añadidos mediante el uso de la función <b>SetMargins</b> del hijo del objeto:</p>
		<div class="samp">&nbsp;obj.SetMargins( left, top, right, bottom );</div>
		
		<p>Usar Diseños Lineales y configuración de los márgenes de los objetos secundarios, suele ser la mejor manera de la posición de los objetos gráficos de su aplicación.</p>
		
		<h3>Fondos</h3>
		
		<p>El fondo de un diseño es transparente de forma predeterminada, pero se puede establecer un color utilizando la función <b>SetBackColor</b>.</p>
		<div class="samp">&nbsp;lay.SetBackColor( colorCode );</div>
		
		<p>Los colores se dan por <b>códigos de colores hexadecimales</b> que pueden ser copiados de varias aplicaciones de diseño gráfico, o simplemente experimente hasta que consiga el color que desea.<p>

 El formato es (#alpha:red:green:blue) donde cada valor puede ir desde 0 a 255 en base a 16 lo cual es 00 a ff.</p> 
		<p>Por ejemplo "#ff00ff00" sería un verde intenso, "#ff000088" sería un azul medio y "#44ff00ff" sería un púrpura semitransparente.</p>
	
		<p>También puedes utilizar un gradiente de fondo para el diseño usando las funciones <b>SetBackGradient</b> y <b>SetBackGradientRadial</b>.</p>
		<div class="samp">&nbsp;lay.SetBackGradient( colorCode1, colorCode2 );</div><br>
		<div class="samp">&nbsp;lay.SetBackGradientRadial( x, y, radius, co